/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/k8s-gpushare/gpushare-crd-controller/pkg/apis/nvidia/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GPUResourceLister helps list GPUResources.
// All objects returned here must be treated as read-only.
type GPUResourceLister interface {
	// List lists all GPUResources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GPUResource, err error)
	// GPUResources returns an object that can list and get GPUResources.
	GPUResources(namespace string) GPUResourceNamespaceLister
	GPUResourceListerExpansion
}

// gPUResourceLister implements the GPUResourceLister interface.
type gPUResourceLister struct {
	indexer cache.Indexer
}

// NewGPUResourceLister returns a new GPUResourceLister.
func NewGPUResourceLister(indexer cache.Indexer) GPUResourceLister {
	return &gPUResourceLister{indexer: indexer}
}

// List lists all GPUResources in the indexer.
func (s *gPUResourceLister) List(selector labels.Selector) (ret []*v1.GPUResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GPUResource))
	})
	return ret, err
}

// GPUResources returns an object that can list and get GPUResources.
func (s *gPUResourceLister) GPUResources(namespace string) GPUResourceNamespaceLister {
	return gPUResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GPUResourceNamespaceLister helps list and get GPUResources.
// All objects returned here must be treated as read-only.
type GPUResourceNamespaceLister interface {
	// List lists all GPUResources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.GPUResource, err error)
	// Get retrieves the GPUResource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.GPUResource, error)
	GPUResourceNamespaceListerExpansion
}

// gPUResourceNamespaceLister implements the GPUResourceNamespaceLister
// interface.
type gPUResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GPUResources in the indexer for a given namespace.
func (s gPUResourceNamespaceLister) List(selector labels.Selector) (ret []*v1.GPUResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GPUResource))
	})
	return ret, err
}

// Get retrieves the GPUResource from the indexer for a given namespace and name.
func (s gPUResourceNamespaceLister) Get(name string) (*v1.GPUResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gpuresource"), name)
	}
	return obj.(*v1.GPUResource), nil
}
